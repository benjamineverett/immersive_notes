# SQL Commands


**LIKE**
	The % is a wild-card it can match any characters

	ex 1: 'F%' - everything that begins with 'F'

	ex 2:	SELECT name FROM world
	
		WHERE name LIKE '%land'	

	ex 3:	SELECT name FROM world
		WHERE name LIKE '_t%'
		ORDER BY name

	ex 4:	SELECT name, concat(name, 'town')
  		FROM world
 		WHERE name LIKE '%ina%';

**SELECT within SELECT**

	ex 1:	List each country name where the population is larger than that of 'Russia'.

		SELECT name FROM world
		
		WHERE population >
		
		(SELECT population FROM world
		
		WHERE name='Russia');

	ex 2:	Which country has a population that is more than Canada but less than Poland? Show the name and the population.

		SELECT name, population FROM world
		
		WHERE population >
		
		(SELECT population FROM world WHERE name='Canada')
		
		AND population <
		
		(SELECT population FROM world WHERE name='Poland')

**LIMIT and ORDER BY**

	SELECT * FROM customers
	
	ORDER BY cust_name DESC
	
	LIMIT 3;

**SELECT DISTINCT:** only displays unique values in column

	SELECT DISTINCT cust_state FROM customers;

**WHERE**: 
	
	specifies criterion for specific rows

	WHERE must reference original column name not alias

	
**ARITHMETIC OPERATORS**

	SELECT 
		
		price / 2 AS sale_int

		price/2. AS sale_float (**Note the '.'**)

**CASE WHEN**

	SELECT
	
		cust_name AS name,

		CASE WHEN cust_state = 'CO' THEN 1
			
			ELSE 0 END AS in_state

	FROM

		customers;
	
**AGGREGATORS**

	SELECT
	
		COUNT(*),
	
		MAX(price)

	FROM

		products;

**GROUP BY**

	SELECT

		cust_state as state,

		count(*)

	FROM 
	
		customers

	GROUP BY

		cust_state

**HAVING**

	place a condition on an aggreagte use a HAVING

**Joining Tables**

	Join has two parts:
		
		Specifying the tables to be joined (JOIN)

		Specifying columns (ON)



**Order of Evaluation**

	FROM + JOIN: first the product of all tables is formed

	WHERE: filters rows

	GROUP BY + (COUNT, SUM, etc): the rows are grouped using the columns in the group by clause and the aggregation functions are applied on the grouping

	HAVING: like the WHERE clause but can be applied for aggregation

	SELECT: the targeted list of colunns to be evaluated and returned

	DISTINCT: duplicate rows are eliminated

	ORDER BY: the resulting rows are sorted

**Order of writing**

	SELECT(DISTINCT, CASE WHEN)

	FROM

	JOIN, ON
	
	WHERE

	GROUP BY

	HAVING

	ORDER BY

**Subqueries**
	
	SELECT ... FROM (SELECT ...)

	...WHERE colun1 - 

	WHERE column1 IN (SELECT...)


**LOAD SQL AND CREATE DB**

	psql
	
	CREATE DATABASE MyDatabase; -- whatever name you choose

	\q

	
